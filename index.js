// Generated by CoffeeScript 1.8.0
var Promise, defaultOptions, rest, service;

Promise = require('es6-promise').Promise;

rest = require('restler');

defaultOptions = {
  host: 'credentials.habakuk.yocondo.de'
};

service = function(options) {
  var clearCredentials, credentials, key, loadCredentials, timeout, value;
  for (key in defaultOptions) {
    value = defaultOptions[key];
    if (options[key] == null) {
      options[key] = value;
    }
  }
  if (!options.type) {
    throw new Error('error creating habakuk credentials client: options must contain the credentials type as "type"');
  }
  if (!options.clientId) {
    throw new Error('error creating habakuk credentials client: options must contain the client ID as "clientId"');
  }
  credentials = null;
  timeout = null;
  clearCredentials = function() {
    console.log('[habakuk] credentials have expired');
    credentials = null;
    return timeout = null;
  };
  loadCredentials = function() {
    return credentials = new Promise(function(resolve, reject) {
      var req, url;
      url = "http://" + options.host + "/lease/" + options.type + "/" + options.clientId;
      console.log('[habakuk] loading credentials from', url);
      if (timeout) {
        clearTimeout(timeout);
      }
      req = rest.get(url);
      req.on('error', reject);
      req.on('fail', function(data, response) {
        console.log('[habakuk] could not get credentials (status %d), retrying in %d seconds', response.statusCode, data.retryAfter);
        return setTimeout(loadCredentials, data.retryAfter * 1000);
      });
      return req.on('success', function(data, response) {
        var expiry;
        data.leasedUntil = new Date(data.leasedUntil);
        expiry = data.leasedUntil.getTime() - Date.now();
        console.log('[habakuk] leased credentials for %d seconds', (expiry / 1000).toFixed(0));
        if (timeout) {
          clearTimeout(timeout);
        }
        timeout = setTimeout(clearCredentials, expiry);
        return resolve(data.credentials);
      });
    });
  };
  return {
    get: function() {
      if (!credentials) {
        loadCredentials();
      }
      return credentials;
    }
  };
};

module.exports = service;
